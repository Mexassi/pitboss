// Generated by CoffeeScript 1.3.3
(function() {
  var STATUS, create, error, errorStatus, errorStatusMsg, isFatalError, message, run, script, util, vm;

  vm = require('vm');

  util = require('util');

  script = null;

  errorStatus = 0;

  errorStatusMsg = null;

  STATUS = {
    'FATAL': 1
  };

  process.on('message', function(msg) {
    if (msg['code']) {
      return create(msg['code']);
    } else {
      return run(msg);
    }
  });

  create = function(code) {
    code = "\"use strict\";\n" + code;
    try {
      return script = vm.createScript(code);
    } catch (err) {
      errorStatus = STATUS['FATAL'];
      return errorStatusMsg = "VM Syntax Error: " + err;
    }
  };

  run = function(msg) {
    var lib, res, _i, _len, _ref, _ref1;
    if (isFatalError()) {
      error(errorStatusMsg, msg.id);
      return false;
    }
    if (!script) {
      error("No code to run");
      return false;
    }
    if ((_ref = msg.context) == null) {
      msg.context = {};
    }
    if (msg != null ? msg.libraries : void 0) {
      _ref1 = msg != null ? msg.libraries : void 0;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        lib = _ref1[_i];
        msg.context[lib] = require(lib);
      }
    }
    try {
      res = {
        result: script.runInNewContext(msg.context || {}) || null,
        id: msg.id
      };
      return message(res);
    } catch (err) {
      return error("VM Runtime Error: " + err, msg.id);
    }
  };

  isFatalError = function() {
    if (errorStatus === STATUS['FATAL']) {
      return true;
    } else {
      return false;
    }
  };

  error = function(msg, id) {
    id || (id = null);
    return message({
      error: msg,
      id: id
    });
  };

  message = function(msg) {
    return process.send(msg);
  };

}).call(this);
